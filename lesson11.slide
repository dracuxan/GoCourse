Marshalling and unmarshalling, configuration files
Lesson 11
13 Dec 2024
Tags: golang, go

Pavel Tišnovský
Red Hat, Inc.
email@email.email
https://github.com/RedHatOfficial/GoCourse
@RedHat



* Sources
- [[https://github.com/RedHatOfficial/GoCourse]]
.image ./common/qr_address.png



* Gophers
#The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
#Source https://golang.org/doc/gopher/fiveyears.jpg
#The design and this image is licensed under the Creative Commons 3.0 Attributions license.
.image ./common/fiveyears.jpg _ 900



* Marshalling and unmarshalling

- process of transforming the memory representation of an object into a data format suitable for storage or transmission
- unmarshalling (un-marshalling) performs opposite operation
- allows communication between client and server
- intermediate (serialized) object representation
- marshalling vs serialization (we use serialization in order to implement marshalling)



* Data formats

- XML
- JSON
- JAXB
- gob
- CBOR
- BSON
- MessagePack

- https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats



* Marshalling in Go

- package `encoding`

- encodes the receiver into a binary form and returns the result
.code lesson11/BinaryMarshaler.go

- encodes the receiver into UTF-8-encoded text and returns the result
.code lesson11/TextMarshaler.go

- can be implemented by any structure (where needed)



* Unmarshalling in Go

- package `encoding` as well

- must be able to decode the form generated by MarshalBinary
.code lesson11/BinaryUnmarshaler.go

- must be able to decode the form generated by MarshalText
.code lesson11/TextUnmarshaler.go

- can be implemented by any structure (where needed)


* Why BinaryMarshaler and BinaryUnmarshaler

- "universal" container for moving data around

.code lesson11/Reader.go
.code lesson11/Writer.go


* JSON

- `encoding/json` package

.code lesson11/JsonMarshal.go
.code lesson11/JsonMarshalIndent.go
.code lesson11/JsonUnmarshal.go



* JSON marshaling

.play lesson11/json_marshal_struct.go



* Indenting the JSON output

.play lesson11/json_marshal_struct_indent.go



* Attribute names in JSON

.play lesson11/json_marshal_struct_names.go



* Skip attribute(s)

.play lesson11/json_marshal_struct_names_skip.go



* Marshaling array

.play lesson11/json_marshal_array.go



* Array of any values

- `any` is an alias for `interface{}`

.play lesson11/json_marshal_array_any.go



* Map

.play lesson11/json_marshal_map.go



* Floating point numbers

.play lesson11/json_marshal_floats.go



* Floating point special values 1/2

.play lesson11/json_marshal_floats_specvalues.go /^package main/,/^func main/



* Floating point special values 2/2

.play lesson11/json_marshal_floats_specvalues.go /^func main/,/^}/



* Floating point special values with error checks 1/2

.play lesson11/json_marshal_floats_specvalues_err.go /^package main/,/^func main/



* Floating point special values with error checks 2/2

.play lesson11/json_marshal_floats_specvalues_err.go /^func main/,/^}/



* Unmarshalling 1/2

.play lesson11/json_unmarshal.go /^package main/,/^func main/



* Unmarshalling 2/2

.play lesson11/json_unmarshal.go /^func main/,/^}/



* Unmarshalling with error checking

.play lesson11/json_unmarshal_error.go



* Unmarshalling struct with lowercase item 1/2

.play lesson11/json_unmarshal_lowercase.go /^package main/,/^func main/



* Unmarshalling struct with lowercase item 2/2

.play lesson11/json_unmarshal_lowercase.go /^func main/,/^}/



* XML

- `encoding/xml` package
- attributes -> nodes or attributes
- root node name specification
- sub-nodes support

.code lesson11/XMLMarshal.go
.code lesson11/XMLMarshalIndent.go
.code lesson11/XMLUnmarshal.go



* XML marshalling

.play lesson11/xml_marshal_struct.go



* Indenting

.play lesson11/xml_marshal_struct_indent.go



* Specific node names

.play lesson11/xml_marshal_struct_names.go



* Root node name specification

.play lesson11/xml_marshal_xml_name.go



* XML and Go: advanced features



* XML and JSON specifiers 1/2

.play lesson11/xml_and_json.go /^package main/,/^func main/



* XML and JSON specifiers 2/2

.play lesson11/xml_and_json.go /^func main/,/^}/



* Controlling XML tree shape: subnodes

.play lesson11/xml_marshal_control_1.go



* Controlling XML tree shape: attributes

.play lesson11/xml_marshal_control_2.go



* Controlling XML tree shape: combination

.play lesson11/xml_marshal_control_3.go



* Special types and values in XML 1/2

.play lesson11/xml_marshal_special_types_1.go /^package main/,/^func main/



* Special types and values in XML 2/2

.play lesson11/xml_marshal_special_types_1.go /^func main/,/^}/



* Nested structures in XML 1/2

.play lesson11/xml_marshal_special_types_2.go /^package main/,/^func main/



* Nested structures in XML 2/2

.play lesson11/xml_marshal_special_types_2.go /^func main/,/^}/



* MessagePack

- binary format
- efficient data storage
- objects can be stored as maps
- true arrays

* MessagePack: supported data types

- Nil (null, None)
- Boolean
- Integer (small ones stored efficently)
- Float (single, double) incl. Nan + Infinity
- String
- Binary (byte array)
- Array (sequence of objects)
- Map (sequence of key-value pairs)
- Extension

* MessagePack: serializing `nil`

.play lesson11/msgpack_nil.go /^package main/,/^func main/

* cont.

.play lesson11/msgpack_nil.go /^func main/,/^}/

* MessagePack: serializing small integer

.play lesson11/msgpack_small_int.go /^func main/,/^}/

* MessagePack: serializing single float

.play lesson11/msgpack_single.go /^func main/,/^}/

* MessagePack: serializing a map

.play lesson11/msgpack_map.go /^func main/,/^}/

* MessagePack: serializing map of any 1/2

.play lesson11/msgpack_map2.go /^func main/,/Encoder created/

* MessagePack: serializing map of any 2/2

.play lesson11/msgpack_map2.go /Encoder created/,/^}/

* gob

- Gobs of data
- based on reflection
- very efficient (size+speed)
- built-in into Go standard library

* gob marshalling 1/2

.play lesson11/gob_marshal_struct.go /^package/,/^func main/

* gob marshalling 2/2

.play lesson11/gob_marshal_struct.go /^func main/,/^}/

* BSON

- "binary JSON"

* BSON serialization 1/2

.play lesson11/bson_serialize.go /^package/,/^func main/

* BSON serialization 2/2

.play lesson11/bson_serialize.go /^func main/,/^}/

* BSON deserialization 1/2

.play lesson11/bson_deserialize.go /^package/,/^func main/

* BSON deserialization 2/2

.play lesson11/bson_deserialize.go /^func main/,/^}/

* Size comparisons

.play lesson11/size_comparison.go

* Size comparisons

.code lesson11/sizes.txt


#last slide
* More Gophers
#The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
#Source https://golang.org/doc/gopher/bumper.png
#The design and this image is licensed under the Creative Commons 3.0 Attributions license.
.image ./common/bumper.png  _ 900
